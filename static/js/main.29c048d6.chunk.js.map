{"version":3,"sources":["components/working/bobble.jpg","components/working/Register.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Register","props","responseGoogle","response","console","log","class","id","data-toggle","action","method","clientId","buttonText","onSuccess","onFailure","cookiePolicy","appId","autoLoad","fields","callback","type","placeholder","required","className","value","Component","HeaderComp","src","logo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,oC,uQCMrCC,E,kDACF,WAAYC,GAAO,uCACfA,G,qDAGJ,IAAMC,EAAiB,SAACC,GACzBC,QAAQC,IAAIF,IAKP,OACL,6BACA,kBAAC,EAAD,MACA,8BAAUG,MAAM,YAAYC,GAAG,QACtB,yBAAKD,MAAM,qCACpB,yBAAKA,MAAM,qBACV,uBAAGE,cAAY,WAAWF,MAAM,iCAAhC,WACY,yBAAKA,MAAM,6BACtB,0BAAMG,OAAO,qCAAqCC,OAAO,QACzD,wBAAIJ,MAAM,aAAV,uBACC,2BAAOA,MAAM,aAAb,0CACA,yBAAKA,MAAM,iCAAiCC,GAAG,OAC9C,kBAAC,IAAD,CACqBI,SAAS,2EACTC,WAAW,sBACXC,UAAWX,EACXY,UAAWZ,EACXa,aAAc,uBAElC,kBAAC,IAAD,CACqBC,MAAM,mBACNC,UAAU,EACVC,OAAO,qBACRC,SA1BC,SAAChB,GAC3BC,QAAQC,IAAIF,OA4BT,yBAAKG,MAAM,gBAAe,kCAC1B,yBAAKA,MAAM,cACV,2BAAOc,KAAK,OAAOd,MAAM,eAAee,YAAY,aAAaC,SAAS,cAE3E,yBAAKhB,MAAM,cACV,2BAAOc,KAAK,OAAOd,MAAM,eAAee,YAAY,cAAcC,SAAS,cAE5E,yBAAKhB,MAAM,cACV,2BAAOc,KAAK,QAAQd,MAAM,eAAee,YAAY,gBAAgBC,SAAS,cAE/E,yBAAKhB,MAAM,cACV,2BAAOc,KAAK,WAAWd,MAAM,eAAee,YAAY,WAAWC,SAAS,cAE7E,yBAAKhB,MAAM,oBACX,4BADA,4CAC6C,0BAAMiB,UAAU,QAAhB,kBAD7C,OAC6F,0BAAMA,UAAU,QAAhB,mBAA6C,6BACtI,2BAAOH,KAAK,SAASd,MAAM,4BAA4BC,GAAG,MAAMiB,MAAM,uB,GApDzDC,aA+DjBC,E,uKAEJ,OACC,yBAAKpB,MAAM,qDACV,yBAAKA,MAAM,oCACX,yBAAKqB,IAAKC,IAAMtB,MAAM,oB,GALDmB,aAWVzB,ICpEA6B,MARf,WACE,OACE,yBAAKN,UAAU,OACd,kBAAC,EAAD,QCKeO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.29c048d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bobble.38987466.jpg\";","import React, { Component } from \"react\"\r\nimport \"../working/style.css\"\r\nimport logo from \"./bobble.jpg\"\r\nimport GoogleLogin from \"react-google-login\"\r\nimport FacebookLogin from 'react-facebook-login'\r\n\r\nclass Register extends Component{\r\n    constructor(props){\r\n\t\tsuper(props);\r\n\t\t  }\r\n    render(){\r\n\t\t  const responseGoogle = (response) => {\r\n\t\t\tconsole.log(response);\r\n\t\t  }\r\n\t\t  const responseFacebook = (response) => {\r\n\t\t\tconsole.log(response);\r\n\t\t  }\r\n        return(\r\n\t\t\t<div>\r\n\t\t\t<HeaderComp/>\r\n\t\t\t<fieldset class=\"container\" id=\"form\">\r\n            <div class=\"navbar-nav ml-auto action-buttons\">\r\n\t\t\t<div class=\"nav-item dropdown\">\r\n\t\t\t\t<a data-toggle=\"dropdown\" class=\"nav-link dropdown-toggle mr-4\">Sign Up</a>\r\n                <div class=\"dropdown-menu action-form\">\r\n\t\t\t\t\t<form action=\"/examples/actions/confirmation.php\" method=\"post\">\r\n\t\t\t\t\t<h1 class=\"hint-text\">Create your account</h1>\r\n\t\t\t\t\t\t<small class=\"hint-text\">Sign in with your social media account</small>\r\n\t\t\t\t\t\t<div class=\"form-group social-btn clearfix\" id=\"adj\">\r\n\t\t\t\t\t\t\t<GoogleLogin\r\n                            clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\r\n                            buttonText=\"Sign Up with Google\"\r\n                            onSuccess={responseGoogle}\r\n                            onFailure={responseGoogle}\r\n                            cookiePolicy={'single_host_origin'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t <FacebookLogin\r\n                             appId=\"1088597931155576\"\r\n                             autoLoad={true}\r\n                             fields=\"name,email,picture\"\r\n                            callback={responseFacebook} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"or-seperator\"><b>or</b></div>\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"First Name\" required=\"required\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Second Name\" required=\"required\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<input type=\"email\" class=\"form-control\" placeholder=\"Email Address\" required=\"required\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"required\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"text-center mt-2\">\r\n\t\t\t\t\t\t<p/> By Clicking to Sign up, you agree to our<span className=\"hell\"> Terms of Use </span>and <span className=\"hell\">Privacy Policy.</span><br/>\r\n\t\t\t\t\t\t    <input type=\"submit\" class=\"btn btn-primary btn-block\" id=\"jus\" value=\"Sign Up\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</form>\r\n                </div>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</fieldset>\r\n\t\t\t</div>\r\n\t\t\t)\r\n    }\r\n}\r\nclass HeaderComp extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<nav class=\"navbar navbar-expand-lg navbar-dark default-color\">\r\n\t\t\t\t<div class=\"shadow p-3 mb-5 bg-white rounded\">\r\n\t\t\t\t<img src={logo} class=\"img-fluid\" ></img>\r\n\t\t\t\t</div>\r\n\t\t\t</nav>\r\n\t\t)\r\n\t}\r\n}\r\nexport default Register","import React from 'react';\nimport './App.css';\nimport Register from \"./components/working/Register\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Register/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}